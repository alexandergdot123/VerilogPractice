

module Full_Adder (input A, input B, input Cin, output sum, output Cout);
	assign sum = A^B^Cin;
	assign Cout = (A&B) | (B&Cin) | (A&Cin);
endmodule


module Sixteenbitadder (input[15:0] A, input [15:0] B, input Cin, output [15:0] Sum, output Cout);
	wire [16:0] intermediate;
	assign intermediate[0] = Cin;
	genvar i;
	generate
		for(i=0; i<16; i=i+1) begin : FullAdders
			Full_Adder instances (A[i], B[i], intermediate[i], Sum[i], intermediate[i+1]);
		end
	endgenerate
	assign Cout = intermediate[16];
endmodule

module ALU (input [1:0] control, input [15:0] A, input [15:0] B, output [15:0] out);
	wire [15:0] insertA;
	wire [15:0] insertB;
	assign insertB = ~({16{control[1]}} | {16{control[0]}}) & B;
	assign insertA = (control[0]) ? A&B : A ^ {16{control[1]}};
	wire peepee;
	Sixteenbitadder Adder (insertA, insertB, 0, out, peepee);
endmodule

module RegisterFile #(
  parameter DataWidth  = 16,
  parameter NumRegs    = 8,
  parameter IndexWidth = $clog2(NumRegs)
) (
  input                    clk,
  input                    writeEn,
  input   [IndexWidth-1:0] writeAddr,
  input   [ DataWidth-1:0] writeData,
  input   [IndexWidth-1:0] readAddr1,
  input   [IndexWidth-1:0] readAddr2,
  output  [ DataWidth-1:0] readData1,
  output  [ DataWidth-1:0] readData2,
  input reset
);

  reg [15:0] regs[7:0];
  always @(posedge clk) begin
	if(reset) begin
		regs[0] <=0;
		regs[1] <=0;
		regs[2] <=0;
		regs[3] <=0;
		regs[4] <=0;
		regs[5] <=0;
		regs[6] <=0;
		regs[7] <=0;
	end
  end
		

  always @(posedge clk) begin
    if (writeEn) begin
      regs[writeAddr] <= writeData;
    end
  end

  assign readData1 = regs[readAddr1];
  assign readData2 = regs[readAddr2];

endmodule

module memory (input clk, input [15:0] Addr, input [15:0] dataIn, input RW, input MIOEN, output Ready, output [15:0] memoryOutput,
input memLoad, input [15:0] memLoadAddress, input [15:0] memLoadBits);
	reg [15:0] mem [65535:0];	
	
	always @(posedge clk) begin
		if(memLoad)
			mem[memLoadAddress] <= memLoadBits;
	end
	always @(posedge clk) begin
		/*if (load) begin
			mem<=contents;
			//Ready <= 1;
		end */
		if (MIOEN) begin
			if(RW) begin
				mem[Addr] <= dataIn;
				//Ready <=1;
			end
		end
		/*else begin
			//Ready <=0;
			memoryOutput <=0;
			mem[Addr] <= mem[Addr];
		end*/
	end
	assign memoryOutput = MIOEN ? mem[Addr] : 16'b0000000000000000;
	assign Ready = MIOEN;
endmodule

module LC3Simulation(input clk, input reset, input [15:0] PEECEE, input LOADPC,
 input memload, input [15:0] memloadAddress, input [15:0] memloadBits,
 output [5:0] stateOutput,  output [15:0] mainBusOutput, output [15:0] MAROutput,
output [15:0] MDROutput, output [15:0] PCOutput, output [15:0] IROutput,
output [15:0] SR1Output, output control);
	wire [15:0] SR1OUT, SR2OUT, SR2MUXOUTPUT, 
	ALURESULT, ADDR1MUXRESULT, MARMUXADDERRESULT, MARMUXRESULT, PCPLUSONE, memoryOutput;
	wire GateALU, GateMARMUX, GatePC, GateMDR, ADDR1MUX, MARMUX, LDPC, RW, LDREG,
	LDIR, Negative, Zero, Positive, LDMDR, LDMAR, MIOEN, LDBEN, LDCC, memReady; 
	reg [15:0] PC, mainBus,  MAR, MDR,IR, ADDR2MUXRESULT, PCMUXRESULT;
	reg[2:0] SR1,DR;
	wire[2:0] SR2;
	reg [2:0] CC = 3'b000;
	wire [1:0] ALUK, ADDR2MUX, PCMUX, DRMUX, SR1MUX;
	reg [5:0] state = 6'b010010;
	wire BEN;
	RegisterFile REGFILE (.clk(clk), .writeData(mainBus), .writeAddr(DR), .writeEn(LDREG),
	.readAddr2(SR2), .readAddr1(SR1), .readData2(SR2OUT), .readData1(SR1OUT), .reset(reset));
	
	memory memoryAttachment ( clk, MAR, MDR, RW, MIOEN, memReady, memoryOutput, memload, memloadAddress, memloadBits);
	
	assign SR2MUXOUTPUT = (IR[5]) ? {{11{IR[4]}} , IR[4:0]} : SR2OUT;
	
	assign stateOutput = state;
	assign mainBusOutput = mainBus;
	assign MAROutput = MAR;
	assign MDROutput = MDR;
	assign PCOutput = PC;
	assign IROutput = IR;
	assign SR1Output = MARMUXRESULT;
	assign control = MARMUX;

	ALU  regularALU (.control(ALUK), .A(SR1OUT) , .B(SR2MUXOUTPUT) , .out(ALURESULT));
	
	
	always @(*) begin
		case (ADDR2MUX)
			0: ADDR2MUXRESULT = 16'b0;
			1: ADDR2MUXRESULT = {{10{IR[5]}},IR[5:0]};
			2: ADDR2MUXRESULT = {{7{IR[8]}},IR[8:0]};
			3: ADDR2MUXRESULT = {{5{IR[10]}},IR[10:0]};
		endcase
		
		case (SR1MUX)
			1: SR1 = IR[8:6];
			2: SR1 = {1'b1,1'b1,1'b0};
			default: SR1 = IR[11:9];
		endcase


		case (DRMUX)
			1: DR = {1'b1,1'b1,1'b1};
			2: DR = {1'b1,1'b1,1'b0};
			default: DR = IR[11:9];
		endcase

		case(PCMUX)
			0:PCMUXRESULT = PCPLUSONE;
			2:PCMUXRESULT = MARMUXADDERRESULT;
			default: PCMUXRESULT = mainBus;
		endcase
	end
	assign GateMARMUX = ~state[5] & ~state[4] & state[1];
	assign LDBEN = state[5:0]==0;
	assign LDPC = ~state[5] & state[4] & (state[3:0]==2 | state[3:0]==6 | state[3:0]==5 | state[3:0]==4 | state[3:0]==14);
	assign LDIR = state[5] & state[1] & state[0];
	assign PCMUX[1] = ~(state[4:0]== 18 || state[4:0] == 30);
	assign PCMUX[0] = state[4:0]==30;
	assign GatePC = ~state[5] & ~state[0] & ((~(state[4] ^ state[3]) & state[2] & ~state[1]) | state[4:1] == 9); /* Error in compute for next line, state[27]*/
	assign LDCC = ~state[5] & (state[4:0] == 1 || state[4:0] == 5 || state[4:0] == 9 || state[4:0] ==14 || state[4:0] == 27);
	assign GateALU = ~state[5] & ~state[4] & state[0] & ~state[1] & ~(state[2] & state[3]);
	assign GateMDR = (~state[5] & state[4] & state[3] & state[1] & (state[0] | state[2])) | (state[5] & state[1]);
	assign RW = state[4:0] == 5'b10000;
	assign LDMAR = ~state[5] & ((~state[4] & ~state[3] & state[1] &~state[0]) | (~state[4] & state[3] & state[1] & state[0] & state[0]) | (state[4] & ~state[2] & state[1] & ~state[0]));
	assign MIOEN = ~state[1] & ((~state[5] & state[4] & state[3]) | (~state[5] & state[4] & ~state[2] & ~state[0]) | (state[5] & ~state[4] & ~state[3] & ~state[2] & state[0]));
	assign MARMUX = state[4] | ~state[3] | ~state[2] | ~state[1] | ~state[0];
	assign LDMDR = (~state[5] & state[4] & state[3] & ~state[1]) | state[4:0]==23 | state==33;
	assign ALUK[0] = state[2];
	assign ALUK[1] = state[4] | state[3];
	assign SR1MUX[0] = ~(state==23);
	assign SR1MUX[1] = 1'b0;
	assign LDREG = ~state[5] & ((~state[4] & ~state[3] & state[2] & ~state[1]) | (~state[4] & ~state[2] & ~state[1] & state[0]) | (state[4:0] == 14 | state[4:0] ==27 | state[4:0] ==28));
	assign DRMUX[0] = ~(state[4] ^ state[3]) & state[2] & ~state[1] & ~state[0];
	assign ADDR1MUX = state[2] & ((~state[1] & ~state[0]) | (~state[4] & ~state[3]));
	assign ADDR2MUX[0] = (state[0] & ~state[1]) | (state[2] & ~state[3] & ~state[4]);
	assign ADDR2MUX[1] = ~state[2] | (~state[1] & state[0]) | (state[3] & state[1]) | (state[4] & state[1]);
	assign stateOutput[5:0] = state[5:0];
	assign SR2 = IR[2:0];
	always @(posedge clk) begin
		if(reset) begin
			state <= 18;
			PC <= (LOADPC) ? PEECEE : 16'b0000000000000000;
			MDR <= 0;
			MAR <= 0;
			IR <=0;
			CC<= 0;
			//BEN <= 0;
		end
		else begin
						
			if(LDCC) begin
				CC[2]<=Negative;
				CC[1]<=Zero;
				CC[0]<=Positive;
			end
			else
				CC<=CC;

			if(LDMAR)
				MAR<=mainBus;
			else
				MAR<=MAR;

			if(LDMDR)
				MDR<= (MIOEN) ? memoryOutput : mainBus;
			else
				MDR<=MDR;

			if(LDIR)
				IR<=mainBus;
			else
				IR<=IR;

			if(LDPC)
				PC <= PCMUXRESULT;
			else
				PC <= PC;

			case (state)
				0: state <= {1'b0,1'b1,1'b0, BEN, 1'b1,1'b0};
				1: state <= 18;
				2: state <= 25;
				3: state<= 23;
				4: state <= {5'b01010, IR[11]};
				5: state <= 18;
				6: state <= 25;
				7: state <= 23;
				9: state <= 18;
				10: state <= 24;
				11: state <= 29;
				12: state <= 18;
				14: state <= 18;
				15: state <= 28;
				16: state <= {state[5:2], memReady, state[0]};
				18: state <= 33;
				20: state <= 18;
				21: state <= 18;
				22: state <= 18;
				23: state <= 16;
				24: state <= {state[5:2], memReady, state[0]};
				25: state <= {state[5:2], memReady, state[0]};
				26: state <= 25;
				27: state <= 18;
				28: state <= {state[5:2], memReady, state[0]};
				29: state <= {state[5:2], memReady, state[0]};
				30: state <= 18;
				31: state <= 23;
				32: state <= {2'b00, IR[15:12]};
				33: state <= {state[5:2], memReady, state[0]};
				35: state <= 32;
				default: state <= 63;
			endcase
			/*
			if(LDBEN)
				BEN <= (Negative & IR[11])|(Zero & IR[10])|(Positive & IR[9]);
			else
				BEN <= BEN;

				*/
		end

	end

	assign ADDR1MUXRESULT = (ADDR1MUX) ? SR1OUT: PC;
	wire hello, hello2;
	Sixteenbitadder MARMUXADDER (ADDR1MUXRESULT, ADDR2MUXRESULT, 0, MARMUXADDERRESULT, hello);
	assign BEN = (CC[2] & IR[11])|(CC[1] & IR[10])|(CC[0] & IR[9]);
	Sixteenbitadder PCPLUSONEADDER (PC, 16'b0, 1, PCPLUSONE, hello2);

	assign MARMUXRESULT = (~MARMUX) ? {{8{1'b0}},IR[7:0]} : MARMUXADDERRESULT;

	assign Negative = mainBus[15];
	assign Zero = ~(|mainBus);
	assign Positive = ~(Negative | Zero);
	
	always @(*) begin

		if(GateMARMUX)
			mainBus = MARMUXRESULT;
		else if (GatePC)
			mainBus = PC;
		else if (GateALU)
			mainBus = ALURESULT;
		else if (GateMDR)
			mainBus = MDR;
		else
			mainBus = 16'bZZZZZZZZZZZZZZZZ;


	end
endmodule
