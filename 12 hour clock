module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output reg [7:0] hh,
    output reg [7:0] mm,
    output reg [7:0] ss); 
    reg [3:0] hours =1;
    reg [4:0] enable;
    always @(negedge clk) begin
        if(~ena) 
            enable = 0;
        else begin
            if(~reset) begin
                if(hours == 11 && mm ==8'b01011001 && ss == 8'b01001001) begin
                    pm =~pm;
                end
                else begin
                    pm = pm;
                end
            end
            else
                pm = 0;
            if(mm==8'b01011001 && ss == 8'b01011001) begin
                enable = 5'b11111;
                
            end
            else if (mm[3:0] == 4'b1001 && ss == 8'b01011001) begin
                enable = 5'b01111;
                
            end
            else if (ss == 8'b01011001) begin
                enable = 5'b00111;
                
            end
            else if (ss[3:0] == 4'b1001) begin
                enable = 5'b00011;
                
            end
            else begin
                enable = 5'b00001;
            end

        end
    end
    always @(posedge clk) begin
        if(~reset) begin
            if(enable[4]) begin
                if(hours<12) begin
                    hours = hours + 1;
                end
                else begin
                    hours = 1;
                end
            end
            else begin
                hours = hours;
            end
        end
        else
            hours = 12;
    end
    always @(*) begin
        if(hours<10&& hours >0) begin
            hh=hours;
        end
        else begin
            case (hours)
                10: hh = 8'b00010000;
                11: hh = 8'b00010001;
                default: hh = 8'b00010010;
            endcase
        end
    end
    bcd sec1(clk,reset, enable[0],ss[3:0]);
    bcd5 sec2(clk,reset, enable[1],ss[7:4]);
    bcd min1(clk,reset, enable[2],mm[3:0]);
    bcd5 min2(clk,reset, enable[3],mm[7:4]);

endmodule
module bcd (
    input clk,
    input reset,  
    input enable,
    output [3:0] q);
    wire [3:0] a;
    assign a = {4{reset}};
    always @(posedge clk) begin
        if(enable) begin
            case (q>4'b1000) 
                1:q=0;
                0:q=(q+1)&~a;
            endcase
        end
        else
            q=q;
    end

endmodule
module bcd5 (
    input clk,
    input reset,  
    input enable,
    output [3:0] q);
    wire [3:0] a;
    assign a = {4{reset}};
    always @(posedge clk) begin
        if(enable) begin
            case (q>4'b0100) 
                1:q=0;
                0:q=(q+1)&~a;
            endcase
        end
        else
            q=q;
    end   
endmodule
